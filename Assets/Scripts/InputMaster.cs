//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""9655501a-1a9c-4bc3-861e-f1e5a676d743"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c7a890e2-e9b2-4664-a342-d621b55cb6c6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drive"",
                    ""type"": ""PassThrough"",
                    ""id"": ""039f0613-54e6-456c-b7b2-8aa4b5a4e5c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""6e0393ef-151f-424d-9303-775d8e8131fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""e38a41e8-8c31-4386-9eef-c98baf654ace"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""e5955e87-8259-48b3-bced-629a420a1f99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""8e3971aa-3185-4e07-86dc-36ce01331301"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""e6b09a1a-d9b7-4006-b6ef-4e7b3dcb5c38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break_Keyboard"",
                    ""type"": ""Button"",
                    ""id"": ""79728594-dfdd-4f23-8415-052ea0914adf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f47c0a68-f905-49cc-abca-a801d02da597"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8a89ef3-3f94-4684-9f23-3de23c5d44f2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eeb4d912-bc21-42f3-8064-e2ec96c06de2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4ca2121-b314-46d7-ae3d-262dd94b48fd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e7567d9-50fa-4eb9-aa4d-7372efcce8d7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7979e353-ee8e-4a8f-9d0f-d836f0ac65f3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e11c63aa-346f-4204-813b-9dc26700d0cf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6d29827-8b39-46a7-aae1-5b4ef6c973ff"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break_Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XBoxControler"",
            ""bindingGroup"": ""XBoxControler"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_Steer = m_Car.FindAction("Steer", throwIfNotFound: true);
        m_Car_Drive = m_Car.FindAction("Drive", throwIfNotFound: true);
        m_Car_Break = m_Car.FindAction("Break", throwIfNotFound: true);
        m_Car_Forward = m_Car.FindAction("Forward", throwIfNotFound: true);
        m_Car_Backward = m_Car.FindAction("Backward", throwIfNotFound: true);
        m_Car_Left = m_Car.FindAction("Left", throwIfNotFound: true);
        m_Car_Right = m_Car.FindAction("Right", throwIfNotFound: true);
        m_Car_Break_Keyboard = m_Car.FindAction("Break_Keyboard", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private ICarActions m_CarActionsCallbackInterface;
    private readonly InputAction m_Car_Steer;
    private readonly InputAction m_Car_Drive;
    private readonly InputAction m_Car_Break;
    private readonly InputAction m_Car_Forward;
    private readonly InputAction m_Car_Backward;
    private readonly InputAction m_Car_Left;
    private readonly InputAction m_Car_Right;
    private readonly InputAction m_Car_Break_Keyboard;
    public struct CarActions
    {
        private @InputMaster m_Wrapper;
        public CarActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_Car_Steer;
        public InputAction @Drive => m_Wrapper.m_Car_Drive;
        public InputAction @Break => m_Wrapper.m_Car_Break;
        public InputAction @Forward => m_Wrapper.m_Car_Forward;
        public InputAction @Backward => m_Wrapper.m_Car_Backward;
        public InputAction @Left => m_Wrapper.m_Car_Left;
        public InputAction @Right => m_Wrapper.m_Car_Right;
        public InputAction @Break_Keyboard => m_Wrapper.m_Car_Break_Keyboard;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void SetCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterface != null)
            {
                @Steer.started -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer;
                @Drive.started -= m_Wrapper.m_CarActionsCallbackInterface.OnDrive;
                @Drive.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnDrive;
                @Drive.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnDrive;
                @Break.started -= m_Wrapper.m_CarActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnBreak;
                @Forward.started -= m_Wrapper.m_CarActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_CarActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnBackward;
                @Left.started -= m_Wrapper.m_CarActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_CarActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnRight;
                @Break_Keyboard.started -= m_Wrapper.m_CarActionsCallbackInterface.OnBreak_Keyboard;
                @Break_Keyboard.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnBreak_Keyboard;
                @Break_Keyboard.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnBreak_Keyboard;
            }
            m_Wrapper.m_CarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Drive.started += instance.OnDrive;
                @Drive.performed += instance.OnDrive;
                @Drive.canceled += instance.OnDrive;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Break_Keyboard.started += instance.OnBreak_Keyboard;
                @Break_Keyboard.performed += instance.OnBreak_Keyboard;
                @Break_Keyboard.canceled += instance.OnBreak_Keyboard;
            }
        }
    }
    public CarActions @Car => new CarActions(this);
    private int m_XBoxControlerSchemeIndex = -1;
    public InputControlScheme XBoxControlerScheme
    {
        get
        {
            if (m_XBoxControlerSchemeIndex == -1) m_XBoxControlerSchemeIndex = asset.FindControlSchemeIndex("XBoxControler");
            return asset.controlSchemes[m_XBoxControlerSchemeIndex];
        }
    }
    public interface ICarActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnDrive(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnBreak_Keyboard(InputAction.CallbackContext context);
    }
}
